# =========================================================
#  Cursor Rules – dual-agent 開発フロー専用（v2025-06）
# =========================================================
# 目的:
#   1. Claude / ChatGPT / Cursor AI が "同じ開発ガイドライン" を共有
#   2. バグゼロ・テスト緑・静的解析エラーゼロを保証する
# ---------------------------------------------------------

## ✅ 基本原則
1. **Python 3.13.1 + PEP 8 + PEP 484** を厳守する  
2. すべてのユニットテスト (`pytest`) が **GREEN** になるコードのみ受け入れる  
3. **ruff** と **mypy --strict** の警告 / エラーは 0 件  
4. 可能な限り **標準ライブラリ** で実装し、外部依存は最小  
5. 説明より **完全なコード** を優先  
   - 新規実装は必ず ` ```python ... ``` ` ブロック 1 つにまとめる  
   - 既存ファイル変更時は **diff（```diff）形式** を使う  
6. ファイル生成／更新後、最下部に JSON サマリーを添付  
   ```json
   { "files": ["<file1>", "<file2>"], "status": "green" }
   ```

## 🔎 レビュー & 自己修正ループ
- LLM が生成したコード → 自動テスト失敗 → フィードバック → 再生成
- フィードバックには失敗ログ（pytest 失敗行・ruff・mypy 出力）をそのまま貼る
- 再生成時は "差分最小" をこころがけ、無関係な行を触らない

## 🛠️ スタイル / 命名
- 変数名・関数名は snake_case、クラスは PascalCase
- 関数は docstring で引数・戻り値・例外を記述
- リソース解放は with 文か try/finally を徹底
- マジックナンバー禁止 → Enum や定数に抽出

## 🧪 テスト指針
- 期待値が固定できる処理は パラメタライズ で網羅
- I/O を伴う場合は tempfile / unittest.mock を活用
- 100 行を超える関数・クラスには カバレッジ 95% 以上 を目標

## 🚫 禁止事項
- print デバッグの残し忘れ
- 途中で pass / TODO コメントを残すこと
- 無断で requirements.txt にライブラリを追加すること
- ランダム要素をテストに含める（seed 固定必須）

## 📄 参考
- Cursor 公式ドキュメント「Rules」:
  https://docs.cursor.com/context/rules
- 優れた .cursorrules 事例集:
  https://github.com/PatrickJS/awesome-cursorrules 